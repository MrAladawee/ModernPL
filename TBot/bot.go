package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type EmployeeResponse struct {
	Success   bool       `json:"success"`
	Employees []Employee `json:"employees"`
}

type Employee struct {
	EmployeeID int    `json:"employee_id"`
	LastName   string `json:"lastname"`
	FirstName  string `json:"firstname"`
	MiddleName string `json:"middlename"`
	Email      string `json:"email"`
}

type ScheduleResponse struct {
	Success  bool      `json:"success"`
	Subjects []Subject `json:"subjects"`
}

type Subject struct {
	ID                    string `json:"id"`
	Semester              int    `json:"semester"`
	Year                  int    `json:"year"`
	SubjectName           string `json:"subject_name"`
	SubjectID             int    `json:"subject_id"`
	StartDaySchedule      string `json:"start_day_schedule"`
	FinishDaySchedule     string `json:"finish_day_schedule"`
	DayWeekSchedule       int    `json:"day_week_schedule"`
	TypeWeekSchedule      int    `json:"type_week_schedule"`
	NoteSchedule          string `json:"note_schedule"`
	TotalTimeSchedule     string `json:"total_time_schedule"`
	BeginTimeSchedule     string `json:"begin_time_schedule"`
	EndTimeSchedule       string `json:"end_time_schedule"`
	TeacherID             int    `json:"teacher_id"`
	TeacherLastName       string `json:"teacher_lastname"`
	TeacherFirstName      string `json:"teacher_firstname"`
	TeacherMiddleName     string `json:"teacher_middlename"`
	NumAuditoriumSchedule string `json:"num_auditorium_schedule"`
	BuildingName          string `json:"building_name"`
	BuildingID            string `json:"building_id"`
	GroupList             string `json:"group_list"`
	SubjectKindName       string `json:"subject_kind_name"`
}

type UserData struct {
	FullName  string
	TeacherID int
	Email     string
}

var userData = make(map[int64]UserData)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –§–ò–û
func getEmployee(fullName string) (Employee, error) {

	url := "https://auth.kpfu.tyuop.ru/api/v1/employees?q=" + fullName

	resp, err := http.Get(url)

	if err != nil {
		return Employee{}, err
	}

	defer resp.Body.Close()

	var er EmployeeResponse

	if err := json.NewDecoder(resp.Body).Decode(&er); err != nil {
		return Employee{}, err
	}

	if !er.Success || len(er.Employees) == 0 {
		return Employee{}, fmt.Errorf("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	// –ë–µ—Ä—ë–º –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
	return er.Employees[0], nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
func getSchedule(teacherID int) ([]Subject, error) {

	url := fmt.Sprintf("https://auth.kpfu.tyuop.ru/api/v1/employees/%d/schedule", teacherID)
	resp, err := http.Get(url)

	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	var sr ScheduleResponse

	if err := json.NewDecoder(resp.Body).Decode(&sr); err != nil {
		return nil, err
	}

	if !sr.Success {
		return nil, fmt.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
	}

	return sr.Subjects, nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏ (1 ‚Äî –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 2 ‚Äî –≤—Ç–æ—Ä–Ω–∏–∫, ‚Ä¶, 7 ‚Äî –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
func filterScheduleByDay(subjects []Subject, day int) []Subject {

	var result []Subject

	for _, subj := range subjects {
		if subj.DayWeekSchedule == day {
			result = append(result, subj)
		}
	}

	return result
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
func scheduleMessage(subjects []Subject) string {

	if len(subjects) == 0 {
		return "üòî –í —ç—Ç–æ—Ç –¥–µ–Ω—å –ø–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
	}

	var msg strings.Builder

	for _, subj := range subjects {
		msg.WriteString(fmt.Sprintf("üìö –ü—Ä–µ–¥–º–µ—Ç: %s\n‚è∞ –í—Ä–µ–º—è: %s\nüìç –ê—É–¥–∏—Ç–æ—Ä–∏—è: %s, %s\nüë• –ì—Ä—É–ø–ø—ã: %s\n\n",
			subj.SubjectName,
			subj.TotalTimeSchedule,
			subj.NumAuditoriumSchedule,
			subj.BuildingName,
			subj.GroupList))
	}

	return msg.String()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
func getWeekButtons() tgbotapi.ReplyKeyboardMarkup {

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"),
			tgbotapi.NewKeyboardButton("–í—Ç–æ—Ä–Ω–∏–∫"),
			tgbotapi.NewKeyboardButton("–°—Ä–µ–¥–∞"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ß–µ—Ç–≤–µ—Ä–≥"),
			tgbotapi.NewKeyboardButton("–ü—è—Ç–Ω–∏—Ü–∞"),
			tgbotapi.NewKeyboardButton("–°—É–±–±–æ—Ç–∞"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"),
			tgbotapi.NewKeyboardButton("–û–±—â–µ–µ"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"),
		),
	)
	return keyboard

}

func main() {
	// –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Telegram –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	if botToken == "" {
		log.Fatal("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
	}

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {

		if update.Message != nil {
			chatID := update.Message.Chat.ID

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"
			if strings.ToLower(update.Message.Text) == "–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å" {
				delete(userData, chatID)
				msg := tgbotapi.NewMessage(chatID, "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫.\nüìù –í–≤–µ–¥–∏—Ç–µ –§–ò–û –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:")
				bot.Send(msg)
				continue
			}

			// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚Äì —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –§–ò–û
			if _, exists := userData[chatID]; !exists {

				fullName := update.Message.Text
				employee, err := getEmployee(fullName)

				if err != nil {
					msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
					bot.Send(msg)
					continue
				}

				// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				userData[chatID] = UserData{
					FullName:  fullName,
					TeacherID: employee.EmployeeID,
					Email:     employee.Email,
				}

				confirmation := fmt.Sprintf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω!\nüÜî ID: %d\n‚úâÔ∏è Email: %s\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", employee.EmployeeID, employee.Email)
				msg := tgbotapi.NewMessage(chatID, confirmation)
				msg.ReplyMarkup = getWeekButtons()
				bot.Send(msg)

				continue
			}

			// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚Äì –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ "–û–±—â–µ–µ"
			text := strings.ToLower(update.Message.Text)
			user := userData[chatID]

			subjects, err := getSchedule(user.TeacherID)

			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è teacherID %d: %v", user.TeacherID, err)
				msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å¬ª.")
				bot.Send(msg)
				continue
			}

			var scheduleText string

			switch text {
			case "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":
				scheduleText = scheduleMessage(filterScheduleByDay(subjects, 1))
			case "–≤—Ç–æ—Ä–Ω–∏–∫":
				scheduleText = scheduleMessage(filterScheduleByDay(subjects, 2))
			case "—Å—Ä–µ–¥–∞":
				scheduleText = scheduleMessage(filterScheduleByDay(subjects, 3))
			case "—á–µ—Ç–≤–µ—Ä–≥":
				scheduleText = scheduleMessage(filterScheduleByDay(subjects, 4))
			case "–ø—è—Ç–Ω–∏—Ü–∞":
				scheduleText = scheduleMessage(filterScheduleByDay(subjects, 5))
			case "—Å—É–±–±–æ—Ç–∞":
				scheduleText = scheduleMessage(filterScheduleByDay(subjects, 6))
			case "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":
				scheduleText = scheduleMessage(filterScheduleByDay(subjects, 7))
			case "–æ–±—â–µ–µ":
				scheduleText = scheduleMessage(subjects)
			default:
				scheduleText = "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."
			}

			msg := tgbotapi.NewMessage(chatID, scheduleText)
			msg.ReplyMarkup = getWeekButtons()
			bot.Send(msg)
		}
	}
}
